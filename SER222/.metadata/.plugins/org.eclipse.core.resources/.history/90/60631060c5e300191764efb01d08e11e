import java.util.LinkedList;
import java.util.Queue;

public class LinearProbingHT<Key, Value> implements SymbolTable<Key, Value> {
	
	private int N; // number of key-value pairs
	protected int M; // hash table size
	private Entry<Key, Value>[] entries;

	/**
	 * <ctor>
	 */
	public LinearProbingHT() {
		this(997);
	}

	/**
	 * <ctor> with an M value provided as a param
	 * @param M
	 */
	@SuppressWarnings("unchecked")
	public LinearProbingHT(int M) {
		this.M = M;
		this.N = 0;
		
		this.entries = new Entry[M];
		
		// for (int i = 0; i < M; i++)
			// entries[i] = new LinkedList<Entry>();
	}
	
	private int hash(Key key) {
       return (key.hashCode() & 0x7fffffff) % M;
    }

	@Override
	public void put(Key key, Value val) {
		if(N >= M) {
			resize(2*M);
		}
		int i;
		for(i = hash(key); entries[i] != null; i = (i + 1) % M) {
			if(entries[i].equals(key)) {
				entries[i].value = val;
			}
		}
		entries[i] = new Entry<Key, Value>(key, val);
	}

	private void resize(int i) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public Value get(Key key) {
		for(int i = hash(key); entries[i] != null; i = (i + 1)%M) {
			if(entries[i].key.equals(key)) {
				return entries[i].value;
			}
		}
		return null;
	}

	@Override
	public void delete(Key key) {
		if(contains(key)) {
			for(int i = hash(key); entries[i] != null; i = (i + 1) % M) {
				if(entries[i].key == key) {
					for(int j = i + 1; entries[j] != null; j = (j+1) % M) {
						entries[i] = entries[j];
						i = (i + 1) % M;
					}
					entries[i] = null;
					N--;
				}				
			}
		}		
	}

	@Override
	public boolean contains(Key key) {
		return get(key) != null;
	}

	@Override
	public boolean isEmpty() {
		return N == 0;
	}

	@Override
	public int size() {
		return N;
	}

	@Override
	public Iterable<Key> keys() {
		Queue<Key> queue = new LinkedList<>();
        for (int i = 0; i < M; i++)
            if(entries[i] != null) {
            	queue.add(entries[i].key);
            }
        return queue;
	}	

}
