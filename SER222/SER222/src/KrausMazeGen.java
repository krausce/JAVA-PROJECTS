
/**
 * This program auto generates a simple maze recusively and displays it to the user.
 * 
 * Completion time: 6.5 hours
 *
 * @author Chris Kraus
 * @version version 1.0
 */
import java.util.Random;

public class KrausMazeGen {
        // standard console size in characters.
        private static final int LEVEL_HEIGHT = 25;
        private static final int LEVEL_WIDTH = 80;

        private static final char ICON_WALL = '#';
        private static final char ICON_BLANK = ' ';
        private static Random r = new Random();

        /**
         * Returns a 2D array containing a statically created maze with dimentions
         * 80x24.
         * 
         * @return 2D array containing a maze
         */
        private static char[][] makeMazeStatic() {
                // the following maze was generated with the recursive division method and then
                // modified by hand.

                char level[][] = { { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
                                { '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#',
                                                '#', '#', ' ', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ',
                                                ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', ' ', '#',
                                                ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#',
                                                ' ', '#', '#', ' ', '#', '#', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', '#',
                                                ' ', ' ', ' ', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#',
                                                '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#',
                                                '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#',
                                                ' ', '#', ' ', ' ', ' ', ' ', '#' },
                                { '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#',
                                                ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#',
                                                ' ', '#', ' ', ' ', '#', ' ', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#',
                                                ' ', ' ', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#',
                                                ' ', ' ', '#', ' ', '#', ' ', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#',
                                                ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#',
                                                ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', '#', ' ', ' ', ' ', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ',
                                                ' ', '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#',
                                                ' ', ' ', '#', ' ', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', ' ',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#',
                                                '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#',
                                                ' ', '#', '#', '#', '#', '#', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#',
                                                ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', '#',
                                                ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ',
                                                ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', '#', ' ', '#', '#', '#', ' ', '#',
                                                ' ', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#',
                                                ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ',
                                                ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#',
                                                ' ', ' ', ' ', '#', ' ', ' ', '#' },
                                { '#', ' ', '#', ' ', '#', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#',
                                                ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#',
                                                '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', ' ', '#', '#', '#', '#', ' ', '#', '#', '#', '#',
                                                ' ', '#', '#', '#', ' ', '#', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', '#', '#', '#', '#', '#', ' ', '#',
                                                ' ', '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#' },
                                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', '#', ' ', '#', '#', ' ', '#', '#',
                                                ' ', '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#',
                                                ' ', '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#',
                                                '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', '#', '#', '#', '#', ' ', '#', '#',
                                                '#', '#', '#', '#', ' ', '#', '#', '#', '#', ' ', '#', ' ', ' ', '#',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', ' ', '#', '#', '#', '#' },
                                { '#', ' ', '#', ' ', '#', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#',
                                                ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#',
                                                '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#',
                                                '#', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', '#',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#' },
                                { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
                                                ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                                { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                                                '#', '#', '#', '#', '#', '#', '#' } };

                return level;
        }

        /**
         * Creates a random maze in a 2D array.
         * 
         * @see <a href=
         *      "http://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_division_method">Recursive_division_method</a>
         * @return 2D array containing a maze
         */
        private static char[][] makeMaze() {
                char level[][] = createBlankLevel();

                makeMazeRecursive(level, 1, 1, LEVEL_WIDTH - 2, LEVEL_HEIGHT - 2); // TODO: may need to change but
                                                                                   // probably not.

                return level;
        }

        /**
         * Creates an empty level of standard level height and width. Level will be
         * blank but bordered with wall characters.
         * 
         * @return 2D array containing a maze
         */
        private static char[][] createBlankLevel() {
                char level[][] = new char[LEVEL_HEIGHT][LEVEL_WIDTH];

                // reset level to be entirely blank
                for (int y = 0; y < LEVEL_HEIGHT; y++)
                        for (int x = 0; x < LEVEL_WIDTH; x++)
                                level[y][x] = ' ';

                // top barrier
                for (int x = 0; x < LEVEL_WIDTH; x++)
                        level[0][x] = ICON_WALL;

                // bottom barrier
                for (int x = 0; x < LEVEL_WIDTH; x++)
                        level[LEVEL_HEIGHT - 1][x] = ICON_WALL;

                // left barrier
                for (int y = 0; y < LEVEL_HEIGHT; y++)
                        level[y][0] = ICON_WALL;

                // left barrier
                for (int y = 0; y < LEVEL_HEIGHT; y++)
                        level[y][LEVEL_WIDTH - 1] = ICON_WALL;

                return level;
        }

        /**
         * Generates a random integer, max included.
         * 
         * @param min
         * @param max
         * @return integer
         */
        private static int randNumGen(int min, int max) {
                return r.nextInt(max - min) + min;
        }

        /**
         * Creates a maze recursively with each positional marker stored in a 2D array.
         * "level" will be in a maze configuration upon completion of the program.
         * 
         * @param level
         * @param startX
         * @param startY
         * @param endX
         * @param endY
         * 
         */
        private static void makeMazeRecursive(char[][] level, int startX, int startY, int endX, int endY) {
        	if (((endX - startX) < 3) || ((endY - startY) < 3)) {
        		
    			while ((endX - startX) > 3) {
    				for (int y = startY; y < endY; y++) {
    					level[y][endX - 3] = ICON_WALL;
    				}
    				endX -= 3;
    			}
    			
    			while ((endY - startY) > 3) {
    				for (int x = startX; x < endX; x++) {
    					level[endY - 3][x] = ICON_WALL;
    				}
    				endY -= 3;
    			}
    			return;
        	} else {
        		int vertPartition = randNumGen(startX + 1, endX);
        		int horPartition = randNumGen(startY + 1, endY);
        		
        		for (int y = startY + 1; y < endY; y++) {
        			level[y][vertPartition] = ICON_WALL;
        		}
        		level[randNumGen(startY + 1, endY)][vertPartition] = ICON_BLANK;
        		
        		for (int x = startX + 1; x < endX; x++) {
        			level[horPartition][x] = ICON_WALL;
        		}
        		level[horPartition][randNumGen(startX + 1, endX)] = ICON_BLANK;
        		makeMazeRecursive(level, startX, startY, vertPartition, horPartition);
        		makeMazeRecursive(level, vertPartition + 1, startY, endX, horPartition);
        		makeMazeRecursive(level, startX, horPartition + 1, vertPartition, endY);
        		makeMazeRecursive(level, vertPartition + 1, horPartition + 1, endX, endY);
        	}
        		
        }

        /**
         * Displays a level in the console.
         * 
         * @param level 2D array containing a maze
         */
        private static void drawLevel(char[][] level) {
                int y, x;

                for (y = 0; y < LEVEL_HEIGHT; y++) {
                        for (x = 0; x < LEVEL_WIDTH; x++)
                                System.out.print(level[y][x]);
                        System.out.println();
                }
        }

        /**
         * Entry point.
         * 
         * @param args command line arguments
         */
        public static void main(String[] args) {
                // show static maze (uncomment for sample output)
                // drawLevel(makeMazeStatic());
                // show recursive maze
                drawLevel(makeMaze());
        }
}
