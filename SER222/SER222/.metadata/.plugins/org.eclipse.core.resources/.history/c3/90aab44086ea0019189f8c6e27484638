import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.NoSuchElementException;

/**
 * @author Chris Kraus
 *
 */
public class BetterDiGraph implements EditableDiGraph {
	
	private int vertices;
	private int edges;
	private HashMap<Integer, HashSet<Integer>> adjacentElements;
	
	public BetterDiGraph() {
		this.adjacentElements = new HashMap<>();
		this.vertices = 0;
		this.edges = 0;
	}

	@Override
	public void addEdge(int v, int w) {
		addVertex(v); addVertex(w);
		if(this.adjacentElements.containsKey(v)) {
			if(!this.adjacentElements.get(v).contains(w)) {
				this.adjacentElements.get(v).add(w);
				this.edges++;
			}
		}
	}

	@Override
	public void addVertex(int v) {
		if(!this.adjacentElements.containsKey(v)) {
			this.adjacentElements.put(v, new HashSet<>());
			this.vertices++;
		}
	}

	@Override
	public Iterable<Integer> getAdj(int v) {
		return this.adjacentElements.get(v);
	}

	@Override
	public int getEdgeCount() {
		return this.edges;
	}

	@Override
	public int getIndegree(int v) throws NoSuchElementException {
		if(!containsVertex(v)) {
			throw new NoSuchElementException();
		}
		int numInHash = 0;
		for(Integer out: this.adjacentElements.keySet()) {
			for(Integer i: this.adjacentElements.get(out)) {
				if(i.equals(v)) {
					numInHash++;
				}
			}
		}
		return numInHash;
	}

	private boolean containsVertex(int v) {
		return this.adjacentElements.containsKey(v);
	}

	@Override
	public int getVertexCount() {
		return this.vertices;
	}

	@Override
	public void removeEdge(int v, int w) {
		if(this.adjacentElements.containsKey(v) && this.adjacentElements.containsKey(w)) {
			if(this.adjacentElements.get(v).contains(w)) {
				this.adjacentElements.get(v).remove(w);
				this.edges--;
			}
		}
	}

	@Override
	public void removeVertex(int v) {
		if(this.adjacentElements.containsKey(v)) {
			this.adjacentElements.remove(v);
			for(Map.Entry<Integer, HashSet<Integer>> entry: this.adjacentElements.entrySet()) {
				if(entry.getValue().contains(v)) {
					this.adjacentElements.get(entry.getKey()).remove(v);
				}
			}
		this.vertices--;
		}
	}

	@Override
	public Iterable<Integer> vertices() {
		ArrayList<Integer> hashDisplay = new ArrayList<>();
		for(Integer out: this.adjacentElements.keySet()) {
			if(!hashDisplay.contains(out)) {
				hashDisplay.add(out);
			}
		}
		return hashDisplay;
	}

	public String toString() {
		String strOut = "";
		for(Integer index: this.vertices()) {
			strOut.concat("" + index + " ");
		}
		return strOut;		
	}
}
